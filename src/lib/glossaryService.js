import { 
  collection, 
  addDoc, 
  updateDoc, 
  deleteDoc, 
  doc, 
  getDocs, 
  query, 
  orderBy, 
  where,
  serverTimestamp 
} from 'firebase/firestore';
import { db } from './firebase';

const COLLECTION_NAME = 'terms';

// Data structure for glossary terms:
// {
//   id: string (auto-generated by Firestore),
//   term: string,
//   definition: string,
//   ipa: string (IPA pronunciation),
//   mandarin: string (Mandarin translation),
//   tags: string[] (custom tags),
//   createdAt: timestamp,
//   updatedAt: timestamp,
//   userId: string (for future user authentication)
// }

export const glossaryService = {
  // Get all terms
  async getAllTerms() {
    try {
      const q = query(collection(db, COLLECTION_NAME), orderBy('createdAt', 'desc'));
      const querySnapshot = await getDocs(q);
      return querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      }));
    } catch (error) {
      console.error('Error getting terms:', error);
      throw error;
    }
  },

  // Get terms by tag
  async getTermsByTag(tag) {
    try {
      const q = query(
        collection(db, COLLECTION_NAME), 
        where('tags', 'array-contains', tag),
        orderBy('createdAt', 'desc')
      );
      const querySnapshot = await getDocs(q);
      return querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      }));
    } catch (error) {
      console.error('Error getting terms by tag:', error);
      throw error;
    }
  },

  // Search terms
  async searchTerms(searchTerm) {
    try {
      const q = query(collection(db, COLLECTION_NAME), orderBy('createdAt', 'desc'));
      const querySnapshot = await getDocs(q);
      const allTerms = querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      }));
      
      // Client-side filtering for search (Firestore doesn't support full-text search)
      return allTerms.filter(term => 
        term.term.toLowerCase().includes(searchTerm.toLowerCase()) ||
        term.definition.toLowerCase().includes(searchTerm.toLowerCase()) ||
        term.mandarin.toLowerCase().includes(searchTerm.toLowerCase()) ||
        term.tags.some(tag => tag.toLowerCase().includes(searchTerm.toLowerCase()))
      );
    } catch (error) {
      console.error('Error searching terms:', error);
      throw error;
    }
  },

  // Add a new term
  async addTerm(termData) {
    try {
      const docRef = await addDoc(collection(db, COLLECTION_NAME), {
        ...termData,
        tags: termData.tags || [],
        createdAt: serverTimestamp(),
        updatedAt: serverTimestamp()
      });
      return docRef.id;
    } catch (error) {
      console.error('Error adding term:', error);
      throw error;
    }
  },

  // Update an existing term
  async updateTerm(termId, updateData) {
    try {
      const termRef = doc(db, COLLECTION_NAME, termId);
      await updateDoc(termRef, {
        ...updateData,
        updatedAt: serverTimestamp()
      });
    } catch (error) {
      console.error('Error updating term:', error);
      throw error;
    }
  },

  // Delete a term
  async deleteTerm(termId) {
    try {
      await deleteDoc(doc(db, COLLECTION_NAME, termId));
    } catch (error) {
      console.error('Error deleting term:', error);
      throw error;
    }
  },

  // Get all unique tags
  async getAllTags() {
    try {
      const q = query(collection(db, COLLECTION_NAME));
      const querySnapshot = await getDocs(q);
      const allTerms = querySnapshot.docs.map(doc => doc.data());
      
      // Extract and deduplicate tags
      const allTags = allTerms.flatMap(term => term.tags || []);
      return [...new Set(allTags)].sort();
    } catch (error) {
      console.error('Error getting tags:', error);
      throw error;
    }
  }
};
